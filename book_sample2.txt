#include<bits/stdc++.h>
using namespace std;
int findMaxProMem(vector<int> &values, vector<int> &weights, int n, int w, int index, vector<vector<int>> &dp){
	
	if(index==n || w==0) return 0;
	if(dp[index][w]!=-1) return dp[index][w];
	int take=0;
	if(w-weights[index]>=0) take = values[index]+ findMaxProMem(values, weights, n, w-weights[index], index+1, dp);
	
	int notTake= findMaxProMem(values, weights, n, w, index+1, dp);
	return dp[index][w]= max(take, notTake);
}
int findMaxTab1(vector<int> &values, vector<int> &weights, int n, int maxWeight){
        vector<int> curr(maxWeight+1,0);
vector<int> prev(maxWeight+1,0);
for(int index=n-1; index>=0; index--){
for(int w=1; w<=maxWeight; w++){

int take=0;
if(w-weights[index]>=0) take = values[index]+ prev[w-weights[index]];
	
int notTake= prev[w];
curr[w]= max(take, notTake);
}
prev=curr;
}
return curr[maxWeight];
	
}

int findMaxTab2(vector<int> &values, vector<int> &weights, int n, int maxWeight){
        vector<vector<int>> dp(n+1, vector<int>(maxWeight+1,0));
for(int index=n-1; index>=0; index--){
for(int w=1; w<=maxWeight; w++){

int take=0;
if(w-weights[index]>=0) take = values[index]+ dp[index+1][w-weights[index]];
	
int notTake= dp[index+1][w];
dp[index][w]= max(take, notTake);
}}
return dp[0][maxWeight];
	
}



int main(){
    int n, w;
cin>>n>>w;
vector<int> price(n);
vector<int> page(n);
for(int i=0; i<n; i++) cin>>price[i];
for(int i=0; i<n; i++) cin>>page[i];

//vector<vector<int>> dp(n, vector<int>(w+1,-1));
//cout<<findMaxProMem(page, price, n, w, 0, dp);
cout<<findMaxTab(page, price,  n, w);

}
